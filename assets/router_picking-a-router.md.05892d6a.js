import{_ as s,o as a,c as e,Q as o}from"./chunks/framework.6f0990a9.js";const h=JSON.parse('{"title":"选择 Router","description":"","frontmatter":{},"headers":[],"relativePath":"router/picking-a-router.md","filePath":"router/picking-a-router.md","lastUpdated":1699631755000}'),n={name:"router/picking-a-router.md"},l=o(`<h1 id="选择-router" tabindex="-1">选择 Router <a class="header-anchor" href="#选择-router" aria-label="Permalink to &quot;选择 Router&quot;">​</a></h1><p>虽然您的应用程序只使用单个路由，但根据您的应用程序运行的环境，有几个路由可供选择。本文档应该可以帮助您确定要使用哪个路由。</p><h2 id="使用-v6-4-数据-api" tabindex="-1">使用 v6.4 数据 API <a class="header-anchor" href="#使用-v6-4-数据-api" aria-label="Permalink to &quot;使用 v6.4 数据 API&quot;">​</a></h2><p>在 v6.4 中，引入了支持新<a href="./../router/picking-a-router#data-apis">数据 APIs</a> 的新路由：</p><ul><li><a href="./../router/create-browser-router"><code>createBrowserRouter</code></a></li><li><a href="./../router/create-memory-router"><code>createMemoryRouter</code></a></li><li><a href="./../router/create-hash-router"><code>createHashRouter</code></a></li><li><a href="./../router/create-static-router"><code>createStaticRouter</code></a></li></ul><p>以下路由不支持数据 API：</p><ul><li><a href="./../router-components/browser-router"><code>&lt;BrowserRouter&gt;</code></a></li><li><a href="./../router-components/memory-router"><code>&lt;MemoryRouter&gt;</code></a></li><li><a href="./../router-components/hash-router"><code>&lt;HashRouter&gt;</code></a></li><li><a href="./../router-components/native-router"><code>&lt;NativeRouter&gt;</code></a></li><li><a href="./../router-components/static-router"><code>&lt;StaticRouter&gt;</code></a></li></ul><p>我们建议您更新应用程序，使用 6.4 中的一种新路由。React Native 目前不支持数据 API，但最终应该会支持。</p><p>要快速升级到 v6.4，最简单的方法是从 <a href="./../utils/create-routes-from-elements"><code>createRoutesFromElements</code></a> 获取帮助，这样就无需将 <code>&lt;Route&gt;</code> 元素转换为路由对象。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  createBrowserRouter,</span></span>
<span class="line"><span style="color:#E1E4E8;">  createRoutesFromElements,</span></span>
<span class="line"><span style="color:#E1E4E8;">  Route,</span></span>
<span class="line"><span style="color:#E1E4E8;">  RouterProvider,</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-router-dom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBrowserRouter</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createRoutesFromElements</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">element</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{&lt;</span><span style="color:#79B8FF;">Root</span><span style="color:#E1E4E8;"> /&gt;}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;dashboard&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">element</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{&lt;</span><span style="color:#79B8FF;">Dashboard</span><span style="color:#E1E4E8;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span><span style="color:#6A737D;">/* ... etc. */</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">React.StrictMode</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">RouterProvider</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">router</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{router} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">React.StrictMode</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  createBrowserRouter,</span></span>
<span class="line"><span style="color:#24292E;">  createRoutesFromElements,</span></span>
<span class="line"><span style="color:#24292E;">  Route,</span></span>
<span class="line"><span style="color:#24292E;">  RouterProvider,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-router-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBrowserRouter</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createRoutesFromElements</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">element</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{&lt;</span><span style="color:#005CC5;">Root</span><span style="color:#24292E;"> /&gt;}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;dashboard&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">element</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{&lt;</span><span style="color:#005CC5;">Dashboard</span><span style="color:#24292E;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {</span><span style="color:#6A737D;">/* ... etc. */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">React.StrictMode</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">RouterProvider</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">router</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{router} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#005CC5;">React.StrictMode</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="web-项目" tabindex="-1">Web 项目 <a class="header-anchor" href="#web-项目" aria-label="Permalink to &quot;Web 项目&quot;">​</a></h2><p>我们建议所有的 Web 项目使用 <a href="./../router/create-browser-router"><code>createBrowserRouter</code></a>。</p><p>在 <code>history.pushState</code> 标准化之前，它使用的是完整 URL，而不是 Web 应用中常见的 Hash URL（ <code>#this/stuff</code> ）。完整 URL 更利于搜索引擎优化，更利于服务器渲染，而且与其他网络平台的兼容性更好。</p><p>如果将应用程序托管在静态文件服务器上，则需要将其配置为将所有请求发送到 <code>index.html</code> ，以避免出现 404 错误。</p><p>如果由于某种原因无法使用完整的 URL，<a href="./../router/create-hash-router"><code>createHashRouter</code></a>是下一个最佳选择。</p><p>如果对数据应用程序接口不感兴趣，可以继续使用<a href="./../router-components/browser-router"><code>&lt;BrowerRouter&gt;</code></a>，如果不能使用完整的 URL，则可以使用<a href="./../router-components/hash-router"><code>&lt;HashRouter&gt;</code></a>.</p><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><p>使用 <a href="./../router/create-memory-router"><code>createMemoryRouter</code></a> 或<a href="./../router-components/memory-router"><code>&lt;MemoryRouter&gt;</code></a>测试使用 React 路由器 API 的组件是最简单的，而不是在应用程序中使用需要 DOM 历史 API 的路由器。</p><p>某些 React Router API 在内部使用 <code>fetch</code> ，它仅从 Node.js v18 开始受支持。如果您的项目使用 v17 或更低版本，则应手动添加 <code>fetch</code> polyfill。一种方法是安装 <a href="https://www.npmjs.com/package/whatwg-fetch" target="_blank" rel="noreferrer"><code>whatwg-fetch</code></a>并将其添加到 <code>jest.config.js</code> 文件中，如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  setupFiles: [</span><span style="color:#9ECBFF;">&quot;whatwg-fetch&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...rest of the config</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  setupFiles: [</span><span style="color:#032F62;">&quot;whatwg-fetch&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...rest of the config</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="react-native" tabindex="-1">React Native <a class="header-anchor" href="#react-native" aria-label="Permalink to &quot;React Native&quot;">​</a></h2><p>您将从 React Native 项目中使用<a href="./../router-components/native-router"><code>&lt;NativeRouter&gt;</code></a>。</p><p>React Native 目前不支持 v6.4 中的数据 API，但最终应该会支持。</p><h2 id="数据-apis" tabindex="-1">数据 APIs <a class="header-anchor" href="#数据-apis" aria-label="Permalink to &quot;数据 APIs&quot;">​</a></h2><p>以下 API 在 React Router 6.4 中引入，只有在使用数据路由时才能使用：</p><ul><li><a href="./../route/action"><code>route.action</code></a></li><li><a href="./../route/error-element"><code>route.errorElement</code></a></li><li><a href="./../route/lazy"><code>route.lazy</code></a></li><li><a href="./../route/loader"><code>route.loader</code></a></li><li><a href="./../route/should-revalidate"><code>route.shouldRevalidate</code></a></li><li><a href="./../route/route#handle"><code>route.handle</code></a></li><li><a href="./../components/await"><code>&lt;Await&gt;</code></a></li><li><a href="./../components/form"><code>&lt;Form&gt;</code></a></li><li><a href="./../components/scroll-restoration"><code>&lt;ScrollRestoration&gt;</code></a></li><li><a href="./../hooks/use-action-data"><code>useActionData</code></a></li><li><a href="./../hooks/use-async-error"><code>useAsyncError</code></a></li><li><a href="./../hooks/use-async-value"><code>useAsyncValue</code></a></li><li><a href="./../hooks/use-fetcher"><code>useFetcher</code></a></li><li><a href="./../hooks/use-fetchers"><code>useFetchers</code></a></li><li><a href="./../hooks/use-loader-data"><code>useLoaderData</code></a></li><li><a href="./../hooks/use-matches"><code>useMatches</code></a></li><li><a href="./../hooks/use-navigation"><code>useNavigation</code></a></li><li><a href="./../hooks/use-revalidator"><code>useRevalidator</code></a></li><li><a href="./../hooks/use-route-error"><code>useRouteError</code></a></li><li><a href="./../hooks/use-route-loader-data"><code>useRouteLoaderData</code></a></li><li><a href="./../hooks/use-submit"><code>useSubmit</code></a></li><li><code>startViewTransition</code>支持 <a href="./../components/link#unstable_viewtransition">Link</a> 和 <a href="./../hooks/use-navigate#optionsunstable_viewtransition">useNavigate</a></li></ul>`,26),t=[l];function r(p,c,i,E,u,y){return a(),e("div",null,t)}const m=s(n,[["render",r]]);export{h as __pageData,m as default};
