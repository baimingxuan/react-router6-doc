import{_ as s,o as a,c as e,Q as t}from"./chunks/framework.6f0990a9.js";const h=JSON.parse('{"title":"API开发战略","description":"","frontmatter":{},"headers":[],"relativePath":"guides/api-development-strategy.md","filePath":"guides/api-development-strategy.md","lastUpdated":1699266951000}'),o={name:"guides/api-development-strategy.md"},n=t(`<h1 id="api开发战略" tabindex="-1">API开发战略 <a class="header-anchor" href="#api开发战略" aria-label="Permalink to &quot;API开发战略&quot;">​</a></h1><p>让我们直奔主题--主要版本升级可能会很麻烦。尤其是像框架或路由器这样的基础应用。对于 Remix 和 React Router，我们希望尽最大努力为您提供最顺畅的升级体验。</p><blockquote><p>NOTE</p><p>我们的 &quot;<a href="https://remix.run/blog/future-flags" target="_blank" rel="noreferrer">Future Flags</a> &quot;博文对这一策略进行了更详细的讨论，如果你想了解更多信息，请在本文档末尾阅读该博文！</p></blockquote><h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h2><p>我们发布 Remix 和 React Router 的主要目标是</p><ul><li>开发人员可以在SemVer-major功能<em>发布</em>时逐一选择采用这些功能，而不必等到NPM推出新的主要版本时才一次性全部采用。</li><li>在提前选择功能后，开发人员只需在一个短命分支/提交中（几小时，而不是几周）就能升级到新的主要版本</li></ul><h2 id="实施情况" tabindex="-1">实施情况 <a class="header-anchor" href="#实施情况" aria-label="Permalink to &quot;实施情况&quot;">​</a></h2><p>我们计划通过我们称之为 &quot;Future Flags&quot; 的方式来实现这一目标，您将在初始化<a href="https://baimingxuan.github.io/react-router6-doc/routers/picking-a-router" target="_blank" rel="noreferrer">数据路由</a>时提供这些标志。可以将其视为未来功能的功能标志。当我们实现新功能时，我们总是尝试以一种向后兼容的方式来实现它们。但是，当需要进行突破性更改时，我们不会将该功能放在 v7 版本的最终版本中。相反，我们会添加一个&quot;Future Flags&quot;，并在 v6 小版本中与当前行为一起实现新功能。这样，用户就可以立即开始使用该功能、提供反馈并报告错误。</p><p>这样一来，用户不仅可以逐步采用新功能（而且无需大幅提升版本），我们还能在 <em>v7 版本发布前</em>逐步解决所有问题。最后，我们还会在 v6 版本中添加弃用警告，提示用户使用新行为。如果在 v6 发布时，应用程序已经选择了所有<code>future flags</code>并更新了代码，那么他们只需将其依赖关系更新到 v7，删除<code>future flags</code>，然后在几分钟内就能在 v7 上运行。</p><h2 id="不稳定与-v7-标志" tabindex="-1">不稳定与 V7 标志 <a class="header-anchor" href="#不稳定与-v7-标志" aria-label="Permalink to &quot;不稳定与 V7 标志&quot;">​</a></h2><p><code>future flags</code>有两种形式：</p><p><strong><code>future.unstable_feature</code></strong></p><p><code>unstable_</code> 标记允许我们与早期用户一起迭代 API，就像我们在<code>v0.x.x</code>版本中一样，但针对的是特定功能。这避免了为所有用户反复修改 API，从而在最终版本中获得更好的 API。这并不意味着我们认为该功能漏洞百出！我们绝对希望早期用户能够开始使用这些功能，这样我们才能对 API 进行迭代（和/或获得信心）。</p><p><strong><code>future.v7_feature</code></strong></p><p><code>v7_</code> 表示对 v6 行为进行了突破性更改，并意味着：（1）API 被认为是稳定的，不会再有任何突破性更改；（2）API 将成为 v7 的默认行为。<code> v7_</code>标志并不意味着该功能没有错误--任何软件都是如此！我们建议您在有时间的情况下升级到 v7 标志，因为这将使您的 v7 升级更加顺利。</p><h3 id="新功能流程示例" tabindex="-1">新功能流程示例 <a class="header-anchor" href="#新功能流程示例" aria-label="Permalink to &quot;新功能流程示例&quot;">​</a></h3><p>新功能的决策流程是这样的（注意，此图与 Remix v1/v2 有关，但也适用于 React Router v6/v7）：</p><p><img src="https://remix.run/docs-images/feature-flowchart.png" alt="Flowchart of the decision process for how to introduce a new feature"></p><p>因此，生命周期要么是:</p><ul><li>非破坏性 + 稳定的应用程序接口功能 -&gt; 在 v6 中落地</li><li>非断裂 + 不稳定 API -&gt; <code>future.unstable_</code> 标志 -&gt; 在 v6 中落地</li><li>破坏 + 稳定 API 功能 -&gt; <code>future.v7_</code> 标志 -&gt; 在 v7 中落地</li><li>破坏 + 不稳定的应用程序接口 -&gt; <code>future.unstable_</code> 标志 -&gt; <code>future.v7_</code> 标志 -&gt; 在 v7 中落地</li></ul><h2 id="当前的-future-flags" tabindex="-1">当前的 Future Flags <a class="header-anchor" href="#当前的-future-flags" aria-label="Permalink to &quot;当前的 Future Flags&quot;">​</a></h2><p>以下是 React Router v6 目前的<code>future flags</code>。</p><h3 id="remix-run-router-future-flags" tabindex="-1"><code>@remix-run/router</code> Future Flags <a class="header-anchor" href="#remix-run-router-future-flags" aria-label="Permalink to &quot;\`@remix-run/router\` Future Flags&quot;">​</a></h3><p>这些标志仅在使用<a href="https://baimingxuan.github.io/react-router6-doc/routers/picking-a-router" target="_blank" rel="noreferrer">数据路由</a>时适用，并在创建 <code>router</code> 实例时传递：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBrowserRouter</span><span style="color:#E1E4E8;">(routes, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  future: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    v7_normalizeFormMethod: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBrowserRouter</span><span style="color:#24292E;">(routes, {</span></span>
<span class="line"><span style="color:#24292E;">  future: {</span></span>
<span class="line"><span style="color:#24292E;">    v7_normalizeFormMethod: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><table><thead><tr><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td><code>v7_fetcherPersist</code></td><td>延迟活动的fetcher清理，直到它们返回到 <code>idle</code> 状态</td></tr><tr><td><code>v7_normalizeFormMethod</code></td><td>将 <code>useNavigation().formMethod</code> 规范化为大写 HTTP 方法</td></tr><tr><td><code>v7_prependBasename</code></td><td>将路由基名作为导航/获取路径的前缀</td></tr></tbody></table><h3 id="路由-future-flags-react" tabindex="-1">路由 Future Flags React <a class="header-anchor" href="#路由-future-flags-react" aria-label="Permalink to &quot;路由 Future Flags React&quot;">​</a></h3><p>这些标记同时适用于数据路由和非数据路由，并会传递给渲染的 React 组件：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">future</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{ v7_startTransition: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">Routes</span><span style="color:#E1E4E8;">&gt;{</span><span style="color:#6A737D;">/*...*/</span><span style="color:#E1E4E8;">}&lt;/</span><span style="color:#79B8FF;">Routes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">future</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{ v7_startTransition: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }}&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">Routes</span><span style="color:#24292E;">&gt;{</span><span style="color:#6A737D;">/*...*/</span><span style="color:#24292E;">}&lt;/</span><span style="color:#005CC5;">Routes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">RouterProvider</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">router</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{router}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">future</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{ v7_startTransition: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }}</span></span>
<span class="line"><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">RouterProvider</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">router</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{router}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">future</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{ v7_startTransition: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }}</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span></span></code></pre></div><table><thead><tr><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td><code>v7_startTransition</code></td><td>将所有路由状态更新包裹着在<a href="https://react.dev/reference/react/startTransition" target="_blank" rel="noreferrer"><code>React.startTransition</code></a>中</td></tr></tbody></table>`,31),l=[n];function r(p,c,u,i,d,E){return a(),e("div",null,l)}const g=s(o,[["render",r]]);export{h as __pageData,g as default};
