import{_ as s,o as a,c as o,Q as l}from"./chunks/framework.6f0990a9.js";const h=JSON.parse('{"title":"useResolvedPath","description":"","frontmatter":{},"headers":[],"relativePath":"hooks/use-resolved-path.md","filePath":"hooks/use-resolved-path.md","lastUpdated":1704271911000}'),n={name:"hooks/use-resolved-path.md"},e=l(`<h1 id="useresolvedpath" tabindex="-1"><code>useResolvedPath</code> <a class="header-anchor" href="#useresolvedpath" aria-label="Permalink to &quot;\`useResolvedPath\`&quot;">​</a></h1><p>类型声明</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useResolvedPath</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">to</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">To</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">relative</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RelativeRoutingType</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Path</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useResolvedPath</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">to</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">To</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">relative</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RelativeRoutingType</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Path</span><span style="color:#24292E;">;</span></span></code></pre></div><p>此钩子根据当前位置的路径名解析给定 <code>to</code> 值中位置的 <code>pathname</code> 。</p><p>这在根据相对值建立链接时非常有用。例如，请查看 <a href="./../components/nav-link"><code>&lt;NavLink&gt;</code></a> 的源代码，它在内部调用 <code>useResolvedPath</code> 来解析所链接页面的完整路径名。</p><p>更多信息，请参阅 <a href="./../utils/resolve-path">resolvePath </a>。</p><h2 id="splat-paths" tabindex="-1">Splat Paths <a class="header-anchor" href="#splat-paths" aria-label="Permalink to &quot;Splat Paths&quot;">​</a></h2><p><code>useResolvedPath</code> 的原始逻辑对溅射路径有不同的行为，事后看来这是不正确/有漏洞的行为。 <a href="https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#v6190" target="_blank" rel="noreferrer"><code>6.19.0</code></a> 中修复了这一问题，但发现大量现有应用程序依赖于这一行为，因此在 <a href="https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#v6201" target="_blank" rel="noreferrer"><code>6.20.1</code></a> 中恢复了这一修复，并在 <a href="https://github.com/remix-run/react-router/blob/main/CHANGELOG.md#v6210" target="_blank" rel="noreferrer"><code>6.21.0</code></a> 中以 <code>future.v7_relativeSplatPath</code> <a href="./../guides/api-development-strategy">future flag</a> 重新引入。这将成为 React Router v7 的默认行为，因此建议您在方便的时候更新您的应用程序，以便为最终的 v7 升级做好更好的准备。</p><p>需要注意的是，这是 React Router 中所有相对路由的基础，因此也适用于以下相对路径代码流：</p><ul><li><code>&lt;Link to&gt;</code></li><li><code>useNavigate()</code></li><li><code>useHref()</code></li><li><code>&lt;Form action&gt;</code></li><li><code>useSubmit()</code></li><li>相对路径 <code>redirect</code> 加载器和操作返回的响应</li></ul><h3 id="未使用标志的行为" tabindex="-1">未使用标志的行为 <a class="header-anchor" href="#未使用标志的行为" aria-label="Permalink to &quot;未使用标志的行为&quot;">​</a></h3><p>如果未启用此标记，默认情况下，在解析 <a href="./../route/route#splats">splat 路由 ( <code>*</code> )</a> 中的相对路径时，路径的 splat 部分将被忽略。因此，给定的路由树如下：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">Routes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/dashboard/*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">element</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{&lt;</span><span style="color:#79B8FF;">Dashboard</span><span style="color:#E1E4E8;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">Routes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">Routes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/dashboard/*&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">element</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{&lt;</span><span style="color:#005CC5;">Dashboard</span><span style="color:#24292E;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#005CC5;">Routes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>如果您当前位于 URL <code>/dashboard/teams</code> ， <code>Dashboard</code> 组件内的 <code>useResolvedPath(&quot;projects&quot;)</code> 将解析为 <code>/dashboard/projects</code> ，因为我们相对的 &quot;当前 &quot;位置将被视为 <code>/dashboard</code> ，<em>而没有 &quot;teams&quot;的 splat 值</em>。</p><p>这为 &quot;同级 &quot;拼接路由（ <code>/dashboard/teams</code> , <code>/dashboard/projects</code> 等）之间的路由选择提供了些许便利，但也造成了其他不一致之处，如：</p><ul><li><code>useResolvedPath(&quot;.&quot;)</code> 不再解析为该路由的当前位置，它实际上是从<code>/dashboard/teams</code>“向上”解析到 <code>/dashboard</code></li><li>如果将路由定义改为使用动态参数 ( <code>&lt;Route path=&quot;/dashboard/:widget&quot;&gt;</code> )，那么 <code>Dashboard</code> 组件内的任何解析路径都会中断，因为动态参数值不会像 splat 值那样被忽略。</li></ul><p>如果你将 <code>splat route</code> 定义为子路由，情况会变得更糟:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">Routes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/dashboard&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">element</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{&lt;</span><span style="color:#79B8FF;">Dashboard</span><span style="color:#E1E4E8;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">Routes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">Routes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/dashboard&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">element</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{&lt;</span><span style="color:#005CC5;">Dashboard</span><span style="color:#24292E;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#005CC5;">Routes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>现在， <code>useResolvedPath(&quot;.&quot;)</code> 和 <code>useResolvedPath(&quot;..&quot;)</code> 解析到 <code>&lt;Dashboard /&gt;</code> 中的路由完全相同。</li><li>如果您使用的是数据路由，并在 splat 路由上定义了 <code>action</code> ，那么在 <code>&lt;Dashboard&gt;</code> 内提交 <code>&lt;Form&gt;</code> 时就会出现 405 错误，因为它们（默认情况下）会提交到 <code>&quot;.&quot;</code> ，这将解析为没有 <code>action</code> 的父 <code>/dashboard</code> 路由。</li></ul><h3 id="使用标志的行为" tabindex="-1">使用标志的行为 <a class="header-anchor" href="#使用标志的行为" aria-label="Permalink to &quot;使用标志的行为&quot;">​</a></h3><p>启用该标记后，这一 &quot;错误 &quot;将得到修复，从而使所有路由类型的路径解析保持一致，并且 <code>useResolvedPath(&quot;.&quot;)</code> 始终解析为上下文路由的当前路径名。这包括任何动态参数或 splat 参数值。</p><p>如果您想在一个 splat 路由中的 &quot;同级 &quot;路由之间导航，建议您将 splat 路由移到它自己的子路由中，然后使用 <code>useResolvedPath(&quot;../teams&quot;)</code> 和 <code>useResolvedPath(&quot;../projects&quot;)</code> 父相关路径导航到同级 <code>/dashboard</code> 路由。请注意，这里我们还使用了 <code>index</code> ，这样 URL <code>/dashboard</code> 也会呈现 <code>&lt;Dashboard&gt;</code> 组件。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">Routes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/dashboard&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">element</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{&lt;</span><span style="color:#79B8FF;">Dashboard</span><span style="color:#E1E4E8;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">Routes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">Routes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/dashboard&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">element</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{&lt;</span><span style="color:#005CC5;">Dashboard</span><span style="color:#24292E;"> /&gt;} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#005CC5;">Routes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;">&gt;</span></span></code></pre></div>`,23),p=[e];function t(c,r,E,y,d,i){return a(),o("div",null,p)}const F=s(n,[["render",t]]);export{h as __pageData,F as default};
