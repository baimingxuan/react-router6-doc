import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.6f0990a9.js";const h=JSON.parse('{"title":"useFetcher","description":"","frontmatter":{},"headers":[],"relativePath":"hooks/use-fetcher.md","filePath":"hooks/use-fetcher.md","lastUpdated":1699796651000}'),o={name:"hooks/use-fetcher.md"},p=l(`<h1 id="usefetcher" tabindex="-1"><code>useFetcher</code> <a class="header-anchor" href="#usefetcher" aria-label="Permalink to &quot;\`useFetcher\`&quot;">​</a></h1><p>在 HTML/HTTP 中，数据突变和加载是通过导航来模拟的： <code>&lt;a href&gt;</code> 和 <code>&lt;form action&gt;</code> 。两者都会在浏览器中引起导航。与 React Router 对应的是 <code>&lt;Link&gt;</code> 和 <code>&lt;Form&gt;</code> 。</p><p>但有时您需要在导航之外调用 <a href="./../route/loader"><code>loader</code></a> ，或者调用 <a href="./../route/action"><code>action</code></a>（并获取页面上的数据以重新验证），而无需更改 URL。或者您需要同时进行多个突变。</p><p>与服务器的许多交互都不是导航事件。此钩子可让你在不导航的情况下将用户界面插入操作和加载器。</p><blockquote><p>IMPORTANT</p><p>此功能只有在使用数据路由器时才有效，请参阅<a href="./../routers/picking-a-router">“选择路由”</a>。</p></blockquote><p>这在需要时非常有用：</p><ul><li>获取与用户界面路由（弹出窗口、动态表单等）无关的数据</li><li>无需导航即可将数据提交至操作（共享组件，如即时通讯注册）</li><li>在一个列表中处理多个并发提交（典型的 &quot;待办事项应用程序 &quot;列表，您可以点击多个按钮，所有按钮都应同时待处理）</li><li>无限滚动容器</li><li>以及更多！</li></ul><p>如果您正在构建一个高度交互、&quot;类似应用程序 &quot;的用户界面，那么您将经常 <code>useFetcher</code> 。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useFetcher } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-router-dom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SomeComponent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fetcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFetcher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// call submit or load in a useEffect</span></span>
<span class="line"><span style="color:#E1E4E8;">  React.</span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(data, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(href);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, [fetcher]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// build your UI with these properties</span></span>
<span class="line"><span style="color:#E1E4E8;">  fetcher.state;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fetcher.formData;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fetcher.json;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fetcher.text;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fetcher.formMethod;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fetcher.formAction;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fetcher.data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// render a form that doesn&#39;t cause navigation</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">fetcher.Form</span><span style="color:#E1E4E8;"> /&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useFetcher } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-router-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SomeComponent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fetcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFetcher</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// call submit or load in a useEffect</span></span>
<span class="line"><span style="color:#24292E;">  React.</span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(data, options);</span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(href);</span></span>
<span class="line"><span style="color:#24292E;">  }, [fetcher]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// build your UI with these properties</span></span>
<span class="line"><span style="color:#24292E;">  fetcher.state;</span></span>
<span class="line"><span style="color:#24292E;">  fetcher.formData;</span></span>
<span class="line"><span style="color:#24292E;">  fetcher.json;</span></span>
<span class="line"><span style="color:#24292E;">  fetcher.text;</span></span>
<span class="line"><span style="color:#24292E;">  fetcher.formMethod;</span></span>
<span class="line"><span style="color:#24292E;">  fetcher.formAction;</span></span>
<span class="line"><span style="color:#24292E;">  fetcher.data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// render a form that doesn&#39;t cause navigation</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">fetcher.Form</span><span style="color:#24292E;"> /&gt;;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>Fetchers</code>有很多内置行为：</p><ul><li>自动处理获取中断时的取消操作</li><li>使用 POST、PUT、PATCH、DELETE 提交时，首先调用操作 <ul><li>操作完成后，页面上的数据会重新验证，以捕捉可能发生的任何变化，从而自动保持用户界面与服务器状态同步</li></ul></li><li>当多个<code>fetchers</code>同时运行时，它会... <ul><li>在每次登陆时提交最新的可用数据</li><li>确保无论响应返回的顺序如何，都不会有陈旧的负载覆盖较新的数据</li></ul></li><li>通过渲染最近的 <code>errorElement</code> 来处理未捕获的错误（就像从 <code>&lt;Link&gt;</code> 或 <code>&lt;Form&gt;</code> 进行正常导航一样）。</li><li>如果调用的操作/加载器返回重定向，应用程序将重定向（就像从 <code>&lt;Link&gt;</code> 或 <code>&lt;Form&gt;</code> 进行普通导航一样）。</li></ul><h2 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to &quot;选项&quot;">​</a></h2><h3 id="key" tabindex="-1"><code>key</code> <a class="header-anchor" href="#key" aria-label="Permalink to &quot;\`key\`&quot;">​</a></h3><p>默认情况下， <code>useFetcher</code> 会生成一个唯一的<code>fetcher</code>，该<code>fetcher</code>的作用域为该组件（不过，在运行过程中，该<code>fetcher</code>可能会在 <a href="./../hooks/use-fetchers"><code>useFetchers()</code></a> 中查找）。如果你想用自己的 <code>key</code> 来识别一个 fetcher，以便从应用程序的其他地方访问它，可以使用 <code>key</code> 选项来实现：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddToBagButton</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fetcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFetcher</span><span style="color:#E1E4E8;">({ key: </span><span style="color:#9ECBFF;">&quot;add-to-bag&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">fetcher.Form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;post&quot;</span><span style="color:#E1E4E8;">&gt;...&lt;/</span><span style="color:#79B8FF;">fetcher.Form</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Then, up in the header...</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CartCount</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fetcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFetcher</span><span style="color:#E1E4E8;">({ key: </span><span style="color:#9ECBFF;">&quot;add-to-bag&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inFlightCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.formData?.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;quantity&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">optimisticCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> inFlightCount;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">BagIcon</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;{optimisticCount}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddToBagButton</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fetcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFetcher</span><span style="color:#24292E;">({ key: </span><span style="color:#032F62;">&quot;add-to-bag&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">fetcher.Form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;post&quot;</span><span style="color:#24292E;">&gt;...&lt;/</span><span style="color:#005CC5;">fetcher.Form</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Then, up in the header...</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CartCount</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">count</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fetcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFetcher</span><span style="color:#24292E;">({ key: </span><span style="color:#032F62;">&quot;add-to-bag&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inFlightCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    fetcher.formData?.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;quantity&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">optimisticCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> inFlightCount;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">BagIcon</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;{optimisticCount}&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h2><h3 id="fetcher-form" tabindex="-1"><code>fetcher.Form</code> <a class="header-anchor" href="#fetcher-form" aria-label="Permalink to &quot;\`fetcher.Form\`&quot;">​</a></h3><p>就像 <code>&lt;Form&gt;</code> 一样，只是它不会导致导航。(你会克服 JSX 中的圆点......我们希望！）。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SomeComponent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fetcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFetcher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">fetcher.Form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;post&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/some/route&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">fetcher.Form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SomeComponent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fetcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFetcher</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">fetcher.Form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;post&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/some/route&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">fetcher.Form</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="fetcher-load" tabindex="-1"><code>fetcher.load()</code> <a class="header-anchor" href="#fetcher-load" aria-label="Permalink to &quot;\`fetcher.load()\`&quot;">​</a></h3><p>从路由<code>loader</code>中加载数据。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useFetcher } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-router-dom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SomeComponent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fetcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFetcher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fetcher.state </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;idle&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">fetcher.data) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fetcher.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/some/route&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, [fetcher]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{fetcher.data </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Loading...&quot;</span><span style="color:#E1E4E8;">}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useFetcher } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-router-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SomeComponent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fetcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFetcher</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fetcher.state </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;idle&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">fetcher.data) {</span></span>
<span class="line"><span style="color:#24292E;">      fetcher.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/some/route&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }, [fetcher]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{fetcher.data </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Loading...&quot;</span><span style="color:#24292E;">}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>虽然一个 URL 可能匹配多个嵌套路由，但 <code>fetcher.load()</code> 调用只会调用叶匹配（或<a href="./../guides/index-search-param">索引路</a>由的父路由）上的<code>loader</code>。</p><p>如果您发现自己在点击处理程序中调用此函数，您可以使用 <code>&lt;fetcher.Form&gt;</code> 来简化代码。</p><blockquote><p>NOTE</p><p>为重新验证的一部分，页面上激活的任何 <code>fetcher.load</code> 调用都将重新执行（在导航提交、另一个<code>fetcher</code>提交或 <code>useRevalidator()</code> 调用之后）。</p></blockquote><h2 id="fetcher-submit" tabindex="-1"><code>fetcher.submit()</code> <a class="header-anchor" href="#fetcher-submit" aria-label="Permalink to &quot;\`fetcher.submit()\`&quot;">​</a></h2><p><code>&lt;fetcher.Form&gt;</code> 的命令式版本。如果是由用户交互启动获取，则应使用 <code>&lt;fetcher.Form&gt;</code> 。但如果是由程序员启动获取（而不是响应用户点击按钮等），则应使用此函数。</p><p>例如，您可能希望在闲置一定时间后注销用户：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useFetcher } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-router-dom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useFakeUserIsIdle } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./fake/hooks&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useIdleLogout</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fetcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFetcher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userIsIdle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFakeUserIsIdle</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (userIsIdle) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fetcher.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        { idle: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        { method: </span><span style="color:#9ECBFF;">&quot;post&quot;</span><span style="color:#E1E4E8;">, action: </span><span style="color:#9ECBFF;">&quot;/logout&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, [userIsIdle]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useFetcher } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-router-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useFakeUserIsIdle } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./fake/hooks&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useIdleLogout</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fetcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFetcher</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userIsIdle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFakeUserIsIdle</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (userIsIdle) {</span></span>
<span class="line"><span style="color:#24292E;">      fetcher.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        { idle: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">        { method: </span><span style="color:#032F62;">&quot;post&quot;</span><span style="color:#24292E;">, action: </span><span style="color:#032F62;">&quot;/logout&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }, [userIsIdle]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>fetcher.submit</code> 是 <a href="./../hooks/use-submit"><code>useSubmit</code></a>调用 fetcher 实例的包装器，因此也接受与<code>useSubmit</code>相同的选项。</p><p>如果要提交索引路由，请使用<a href="./../guides/index-search-param"><code>?index</code> 参数</a>。</p><p>如果您发现自己在点击处理程序中调用此函数，您可以使用 <code>&lt;fetcher.Form&gt;</code> 来简化代码。</p><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><h3 id="fetcher-state" tabindex="-1"><code>fetcher.state</code> <a class="header-anchor" href="#fetcher-state" aria-label="Permalink to &quot;\`fetcher.state\`&quot;">​</a></h3><p>您可以通过 <code>fetcher.state</code> 了解 fetcher 的状态。它将是:</p><ul><li><strong>idle</strong> - 没有获取任何信息。</li><li><strong>submitting</strong> - 由于使用 POST、PUT、PATCH 或 DELETE 提交了取件，路由操作被调用</li><li><strong>loading</strong> - fetcher 正在调用<code>loader</code>（来自 <code>fetcher.load</code> ），或在单独提交或调用 <code>useRevalidator</code> 后正在重新验证</li></ul><h3 id="fetcher-data" tabindex="-1"><code>fetcher.data</code> <a class="header-anchor" href="#fetcher-data" aria-label="Permalink to &quot;\`fetcher.data\`&quot;">​</a></h3><p>加载器或操作返回的数据存储在这里。数据一旦设置完毕，即使重新加载和重新提交，也会在获取器上持续存在。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProductDetails</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">product</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fetcher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFetcher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">details</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">onToggle</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">          event.currentTarget.open </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">          fetcher.state </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;idle&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">fetcher.data</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          fetcher.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`/product/\${</span><span style="color:#E1E4E8;">product</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}/details\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">summary</span><span style="color:#E1E4E8;">&gt;{product.name}&lt;/</span><span style="color:#85E89D;">summary</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {fetcher.data </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{fetcher.data}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;Loading product details...&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      )}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">details</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProductDetails</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">product</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fetcher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFetcher</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">details</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">onToggle</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">          event.currentTarget.open </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          fetcher.state </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;idle&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">fetcher.data</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          fetcher.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`/product/\${</span><span style="color:#24292E;">product</span><span style="color:#032F62;">.</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}/details\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }}</span></span>
<span class="line"><span style="color:#24292E;">    &gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">summary</span><span style="color:#24292E;">&gt;{product.name}&lt;/</span><span style="color:#22863A;">summary</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {fetcher.data </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{fetcher.data}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      ) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;Loading product details...&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      )}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">details</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="fetcher-formdata" tabindex="-1"><code>fetcher.formData</code> <a class="header-anchor" href="#fetcher-formdata" aria-label="Permalink to &quot;\`fetcher.formData\`&quot;">​</a></h3><p>当使用 <code>&lt;fetcher.Form&gt;</code> 或 <code>fetcher.submit()</code> 时，表单数据可用于构建优化的用户界面。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TaskCheckbox</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">task</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fetcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFetcher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// while data is in flight, use that to immediately render</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// the state you expect the task to be in when the form</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// submission completes, instead of waiting for the</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// network to respond. When the network responds, the</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// formData will no longer be available and the UI will</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// use the value in \`task.status\` from the revalidation</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> status </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.formData?.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;status&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> task.status;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> isComplete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> status </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;complete&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">fetcher.Form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;post&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;submit&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;status&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{isComplete </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;complete&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;incomplete&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {isComplete </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Mark Complete&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Mark Incomplete&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">fetcher.Form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TaskCheckbox</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">task</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fetcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFetcher</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// while data is in flight, use that to immediately render</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// the state you expect the task to be in when the form</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// submission completes, instead of waiting for the</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// network to respond. When the network responds, the</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// formData will no longer be available and the UI will</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// use the value in \`task.status\` from the revalidation</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> status </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    fetcher.formData?.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;status&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> task.status;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> isComplete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;complete&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">fetcher.Form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;post&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;submit&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;status&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{isComplete </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;complete&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;incomplete&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">      &gt;</span></span>
<span class="line"><span style="color:#24292E;">        {isComplete </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Mark Complete&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Mark Incomplete&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">fetcher.Form</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="fetcher-json" tabindex="-1"><code>fetcher.json</code> <a class="header-anchor" href="#fetcher-json" aria-label="Permalink to &quot;\`fetcher.json\`&quot;">​</a></h3><p>使用 <code>fetcher.submit(data, { formEncType: &quot;application/json&quot; })</code> 时，提交的 JSON 可通过 <code>fetcher.json</code> 获取。</p><h3 id="fetcher-text" tabindex="-1"><code>fetcher.text</code> <a class="header-anchor" href="#fetcher-text" aria-label="Permalink to &quot;\`fetcher.text\`&quot;">​</a></h3><p>使用 <code>fetcher.submit(data, { formEncType: &quot;text/plain&quot; })</code> 时，提交的文本可通过 <code>fetcher.text</code> 获取。</p><h3 id="fetcher-formaction" tabindex="-1"><code>fetcher.formAction</code> <a class="header-anchor" href="#fetcher-formaction" aria-label="Permalink to &quot;\`fetcher.formAction\`&quot;">​</a></h3><p>告诉您提交表单的操作<code>url</code>。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">fetcher.Form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/mark-as-read&quot;</span><span style="color:#E1E4E8;"> /&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// when the form is submitting</span></span>
<span class="line"><span style="color:#E1E4E8;">fetcher.formAction; </span><span style="color:#6A737D;">// &quot;mark-as-read&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">fetcher.Form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/mark-as-read&quot;</span><span style="color:#24292E;"> /&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// when the form is submitting</span></span>
<span class="line"><span style="color:#24292E;">fetcher.formAction; </span><span style="color:#6A737D;">// &quot;mark-as-read&quot;</span></span></code></pre></div><h3 id="fetcher-formmethod" tabindex="-1"><code>fetcher.formMethod</code> <a class="header-anchor" href="#fetcher-formmethod" aria-label="Permalink to &quot;\`fetcher.formMethod\`&quot;">​</a></h3><p>告诉您提交表单的方法：get、post、put、patch 或 delete。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">fetcher.Form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;post&quot;</span><span style="color:#E1E4E8;"> /&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// when the form is submitting</span></span>
<span class="line"><span style="color:#E1E4E8;">fetcher.formMethod; </span><span style="color:#6A737D;">// &quot;post&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">fetcher.Form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;post&quot;</span><span style="color:#24292E;"> /&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// when the form is submitting</span></span>
<span class="line"><span style="color:#24292E;">fetcher.formMethod; </span><span style="color:#6A737D;">// &quot;post&quot;</span></span></code></pre></div><blockquote><p>IMPORTANT</p><p><code>fetcher.formMethod</code> 字段为小写，没有 <code>future.v7_normalizeFormMethod</code> <a href="./../guides/api-development-strategy">Future Flag</a>。为了与 <code>fetch()</code> 在 v7 中的行为保持一致，我们正在将其规范化为大写，因此请升级 React Router v6 应用程序以采用大写 HTTP 方法。</p></blockquote>`,54),e=[p];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const F=s(o,[["render",t]]);export{h as __pageData,F as default};
