import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.6f0990a9.js";const F=JSON.parse('{"title":"generatePath","description":"","frontmatter":{},"headers":[],"relativePath":"utils/generate-path.md","filePath":"utils/generate-path.md","lastUpdated":1699498063000}'),l={name:"utils/generate-path.md"},o=p(`<h1 id="generatepath" tabindex="-1"><code>generatePath</code> <a class="header-anchor" href="#generatepath" aria-label="Permalink to &quot;\`generatePath\`&quot;">​</a></h1><p>类型声明</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generatePath</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Path</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PathParams</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Path</span><span style="color:#E1E4E8;">&gt;]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generatePath</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Path</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PathParams</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Path</span><span style="color:#24292E;">&gt;]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span></code></pre></div><p><code>generatePath</code> 将一组参数插值为路由路径字符串，其中包含 <code>:id</code> 和 <code>*</code> 占位符。当你想消除路由路径中的占位符，使其静态匹配而不是使用动态参数时，这种方法非常有用。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">generatePath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users/:id&quot;</span><span style="color:#E1E4E8;">, { id: </span><span style="color:#9ECBFF;">&quot;42&quot;</span><span style="color:#E1E4E8;"> }); </span><span style="color:#6A737D;">// &quot;/users/42&quot;</span></span>
<span class="line"><span style="color:#B392F0;">generatePath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/files/:type/*&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  type: </span><span style="color:#9ECBFF;">&quot;img&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cat.jpg&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}); </span><span style="color:#6A737D;">// &quot;/files/img/cat.jpg&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">generatePath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users/:id&quot;</span><span style="color:#24292E;">, { id: </span><span style="color:#032F62;">&quot;42&quot;</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// &quot;/users/42&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">generatePath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/files/:type/*&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  type: </span><span style="color:#032F62;">&quot;img&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cat.jpg&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}); </span><span style="color:#6A737D;">// &quot;/files/img/cat.jpg&quot;</span></span></code></pre></div>`,5),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{F as __pageData,h as default};
