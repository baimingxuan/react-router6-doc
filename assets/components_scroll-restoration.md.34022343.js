import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.0e8ae64e.js";const u=JSON.parse('{"title":"<ScrollRestoration />","description":"","frontmatter":{},"headers":[],"relativePath":"components/scroll-restoration.md","filePath":"components/scroll-restoration.md","lastUpdated":1699184691000}'),o={name:"components/scroll-restoration.md"},p=l(`<h1 id="scrollrestoration" tabindex="-1"><code>&lt;ScrollRestoration /&gt;</code> <a class="header-anchor" href="#scrollrestoration" aria-label="Permalink to &quot;\`&lt;ScrollRestoration /&gt;\`&quot;">​</a></h1><p>该组件将在加载程序完成后，模拟浏览器在位置更改时的滚动恢复功能，以确保滚动位置恢复到正确位置，甚至跨域滚动。</p><blockquote><p>IMPORTANT</p><p>此功能只有在使用数据路由器时才有效，请参阅<a href="https://baimingxuan.github.io/react-router6-doc/routers/picking-a-router" target="_blank" rel="noreferrer">&quot;选择路由&quot;</a></p></blockquote><p>只需呈现其中一个，建议在应用程序的根路由中呈现：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ScrollRestoration } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-router-dom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RootRouteComponent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">ScrollRestoration</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ScrollRestoration } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-router-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RootRouteComponent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      {</span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">ScrollRestoration</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="getkey" tabindex="-1"><code>getKey</code> <a class="header-anchor" href="#getkey" aria-label="Permalink to &quot;\`getKey\`&quot;">​</a></h2><p>可选属性，用于定义 React Router 恢复滚动位置时应使用的键。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">ScrollRestoration</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getKey</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">location</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">matches</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// default behavior</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> location.key;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }}</span></span>
<span class="line"><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">ScrollRestoration</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getKey</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">location</span><span style="color:#24292E;">, </span><span style="color:#E36209;">matches</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// default behavior</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> location.key;</span></span>
<span class="line"><span style="color:#24292E;">  }}</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>默认情况下，它使用 <code>location.key</code> ，在没有客户端路由的情况下模拟浏览器的默认行为。用户可以在堆栈中多次导航到相同的 URL，每个条目都有自己的滚动位置来还原。</p><p>有些应用可能希望覆盖这一行为，并根据其他内容恢复位置。例如，一个社交应用程序有四个主要页面：</p><ul><li>&quot;/home&quot;</li><li>&quot;/messages&quot;</li><li>&quot;/notifications&quot;</li><li>&quot;/search&quot;</li></ul><p>如果用户从&quot;/home &quot;开始，向下滚动一点，点击导航菜单中的 &quot;信息&quot;，然后点击导航菜单中的 &quot;主页&quot;（而不是返回按钮！），历史堆栈中就会出现三个条目：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span></span>
<span class="line"><span style="color:#79B8FF;">2.</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">messages</span></span>
<span class="line"><span style="color:#79B8FF;">3.</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1.</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span></span>
<span class="line"><span style="color:#005CC5;">2.</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">messages</span></span>
<span class="line"><span style="color:#005CC5;">3.</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span></span></code></pre></div><p>默认情况下，React Router（和浏览器）会为 <code>1</code> 和 <code>3</code> 存储两个不同的滚动位置，即使它们的 URL 相同。这意味着当用户从 <code>2</code> → <code>3</code> 浏览时，滚动位置会移到顶部，而不是恢复到 <code>1</code> 中的位置。</p><p>这里一个可靠的产品决策是，无论用户如何到达（返回按钮或新链接点击），都要保持他们在主页上的滚动位置。为此，您需要使用 <code>location.pathname</code> 作为关键字。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">ScrollRestoration</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getKey</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">location</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">matches</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> location.pathname;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }}</span></span>
<span class="line"><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">ScrollRestoration</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getKey</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">location</span><span style="color:#24292E;">, </span><span style="color:#E36209;">matches</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> location.pathname;</span></span>
<span class="line"><span style="color:#24292E;">  }}</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>或者，您可能只想对某些路径使用路径名，而对其他路径使用正常行为：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">ScrollRestoration</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getKey</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">location</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">matches</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">paths</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;/home&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/notifications&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> paths.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(location.pathname)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// home and notifications restore by pathname</span></span>
<span class="line"><span style="color:#E1E4E8;">        location.pathname</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// everything else by location like the browser</span></span>
<span class="line"><span style="color:#E1E4E8;">        location.key;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }}</span></span>
<span class="line"><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">ScrollRestoration</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getKey</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">location</span><span style="color:#24292E;">, </span><span style="color:#E36209;">matches</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">paths</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;/home&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/notifications&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> paths.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(location.pathname)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// home and notifications restore by pathname</span></span>
<span class="line"><span style="color:#24292E;">        location.pathname</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// everything else by location like the browser</span></span>
<span class="line"><span style="color:#24292E;">        location.key;</span></span>
<span class="line"><span style="color:#24292E;">  }}</span></span>
<span class="line"><span style="color:#24292E;">/&gt;</span></span></code></pre></div><h2 id="防止滚动重置" tabindex="-1">防止滚动重置 <a class="header-anchor" href="#防止滚动重置" aria-label="Permalink to &quot;防止滚动重置&quot;">​</a></h2><p>当导航创建新的滚动键时，滚动位置会重置为页面顶部。您可以防止链接和表单出现 &quot;滚动到顶部 &quot;行为：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preventScrollReset</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">} /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preventScrollReset</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">} /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preventScrollReset</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">} /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preventScrollReset</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">} /&gt;</span></span></code></pre></div><p>另请参阅：<a href="https://baimingxuan.github.io/react-router6-doc/components/link#preventscrollreset" target="_blank" rel="noreferrer"><code>&lt;Link preventScrollReset&gt;</code></a>,<a href="https://baimingxuan.github.io/react-router6-doc/components/form#preventscrollreset" target="_blank" rel="noreferrer"><code>&lt;Form preventScrollReset&gt;</code></a></p><h2 id="滚动闪烁" tabindex="-1">滚动闪烁 <a class="header-anchor" href="#滚动闪烁" aria-label="Permalink to &quot;滚动闪烁&quot;">​</a></h2><p>如果没有 <a href="https://remix.run/" target="_blank" rel="noreferrer">Remix</a> 这样的服务器端渲染框架，在初始页面加载时可能会出现一些滚动闪烁。这是因为 React Router 无法还原滚动位置，直到您的 JS 捆绑包下载完毕、数据加载完毕、整个页面渲染完毕（如果您正在渲染一个旋转器，视口很可能不是保存滚动位置时的大小）。</p><p>服务器渲染框架可以防止滚动闪烁，因为它们可以在首次加载时发送一个完整的文档，因此可以在页面首次渲染时恢复滚动。</p>`,25),e=[p];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const g=s(o,[["render",t]]);export{u as __pageData,g as default};
