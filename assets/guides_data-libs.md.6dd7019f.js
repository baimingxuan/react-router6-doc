import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.6f0990a9.js";const F=JSON.parse('{"title":"数据仓库集成","description":"","frontmatter":{},"headers":[],"relativePath":"guides/data-libs.md","filePath":"guides/data-libs.md","lastUpdated":1699498063000}'),p={name:"guides/data-libs.md"},o=l(`<h1 id="数据仓库集成" tabindex="-1">数据仓库集成 <a class="header-anchor" href="#数据仓库集成" aria-label="Permalink to &quot;数据仓库集成&quot;">​</a></h1><p>自 v6.4 发布以来，有些人怀疑 React Router 是否试图取代<a href="https://tanstack.com/query/v4/" target="_blank" rel="noreferrer">React Query</a>、<a href="https://swr.vercel.app/" target="_blank" rel="noreferrer">useSwr</a>等库。</p><p>答案是“不！”。</p><p>React Router 的数据 API 是关于何时加载、变异和重新验证数据，而不是如何加载、变异和重新验证数据。它涉及的是数据生命周期，而不是数据获取、变异、存储和缓存的实际实现。</p><p>考虑到 <code>&lt;a href&gt;</code> 和 <code>&lt;form action&gt;</code> 都是导航事件，而且都与数据相关（显示哪些数据或更改哪些数据），因此客户端路由器可以帮助您处理这两个元素的导航状态。但实际的数据实现则取决于您。</p><p>此处的示例改编自<a href="https://tkdodo.eu/blog/react-query-meets-react-router" target="_blank" rel="noreferrer">TkDodo 的博客</a>，感谢您的精彩文章！</p><h2 id="加载数据" tabindex="-1">加载数据 <a class="header-anchor" href="#加载数据" aria-label="Permalink to &quot;加载数据&quot;">​</a></h2><p>您可以在加载器中使用数据抽象，而不是在组件中加载数据。请注意，这种加载发生在 React 渲染生命周期之外，因此不能使用 React Query 的 <code>useQuery</code> 等钩子，而需要直接使用查询客户端的方法。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { queryClient } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./query-client&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">params</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> queryClient.</span><span style="color:#B392F0;">fetchQuery</span><span style="color:#E1E4E8;">(queryKey, queryFn, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    staleTime: </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { queryClient } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./query-client&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">params</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> queryClient.</span><span style="color:#6F42C1;">fetchQuery</span><span style="color:#24292E;">(queryKey, queryFn, {</span></span>
<span class="line"><span style="color:#24292E;">    staleTime: </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>如果查询客户端能正确抛出错误，那么 React Router 的<a href="https://baimingxuan.github.io/react-router6-doc/route/error-element" target="_blank" rel="noreferrer"><code>errorElement</code></a>也能正常工作。</p><p>当然，您可以使用数据仓库的所有功能，例如缓存。缓存数据可以确保当用户点击返回按钮进入已经看过的页面时，数据会立即从缓存中加载。有时缓存是正确的选择，有时你总是希望数据是新鲜的，但这并不在 React Router 数据 API 的决定范围之内。</p><p>React Router 只保留<em>当前页面的 <code>loaderData</code></em>。如果用户点击“返回”，所有加载器都会再次被调用。如果没有 React Query 这样的数据缓存库（或在 JSON API 上添加 HTTP 缓存头以使用浏览器自己的 HTTP 缓存），您的应用将再次重新获取所有数据。</p><p>因此，React Router 与<em>时间</em>有关，而 React Query 与<em>缓存</em>有关。</p><h2 id="访问组件中的数据" tabindex="-1">访问组件中的数据 <a class="header-anchor" href="#访问组件中的数据" aria-label="Permalink to &quot;访问组件中的数据&quot;">​</a></h2><p>虽然 React Router 的 <code>useLoaderData</code> 会返回您从<code>loader</code>返回的内容，但您可以使用数据抽象的钩子来访问该包的全部功能集。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SomeRouteComponent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useLoaderData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useQuery</span><span style="color:#E1E4E8;">(someQueryKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SomeRouteComponent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useLoaderData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useQuery</span><span style="color:#24292E;">(someQueryKey);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="使突变中的数据无效" tabindex="-1">使突变中的数据无效 <a class="header-anchor" href="#使突变中的数据无效" aria-label="Permalink to &quot;使突变中的数据无效&quot;">​</a></h2><p>由于这些库中的大多数都有某种缓存机制，因此您需要在某些时候使这些缓存失效。</p><p>React Router<a href="https://baimingxuan.github.io/react-router6-doc/route/action" target="_blank" rel="noreferrer">操作</a>就是使缓存失效的最佳场所。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { queryClient } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./query-client&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">params</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">formData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">updates</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">fromEntries</span><span style="color:#E1E4E8;">(formData);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateContact</span><span style="color:#E1E4E8;">(params.contactId, updates);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> queryClient.</span><span style="color:#B392F0;">invalidateQueries</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;contacts&quot;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">redirect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`/contacts/\${</span><span style="color:#E1E4E8;">params</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">contactId</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { queryClient } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./query-client&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#E36209;">params</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">formData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">updates</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">fromEntries</span><span style="color:#24292E;">(formData);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateContact</span><span style="color:#24292E;">(params.contactId, updates);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> queryClient.</span><span style="color:#6F42C1;">invalidateQueries</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;contacts&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">redirect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`/contacts/\${</span><span style="color:#24292E;">params</span><span style="color:#032F62;">.</span><span style="color:#24292E;">contactId</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="使用defer" tabindex="-1">使用<code>defer</code> <a class="header-anchor" href="#使用defer" aria-label="Permalink to &quot;使用\`defer\`&quot;">​</a></h2><p>同样，您也可以利用延迟 API：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loader</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defer</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// no await!</span></span>
<span class="line"><span style="color:#E1E4E8;">    someData: queryClient.</span><span style="color:#B392F0;">fetchQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;someKey&quot;</span><span style="color:#E1E4E8;">, fn),</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Comp</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// *do* useLoaderData for promise</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">someData</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useLoaderData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;Something&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">Await</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">resolve</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{someData}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">errorElement</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;Oops!&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">SomeView</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#79B8FF;">Await</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SomeView</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// instead of accessing with useAsyncValue</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// const someData = useAsyncValue();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// \`useQuery\` as usual</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;someKey&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loader</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defer</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// no await!</span></span>
<span class="line"><span style="color:#24292E;">    someData: queryClient.</span><span style="color:#6F42C1;">fetchQuery</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;someKey&quot;</span><span style="color:#24292E;">, fn),</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comp</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// *do* useLoaderData for promise</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">someData</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useLoaderData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;Something&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">Await</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">resolve</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{someData}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">errorElement</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;Oops!&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;}</span></span>
<span class="line"><span style="color:#24292E;">      &gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">SomeView</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#005CC5;">Await</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SomeView</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// instead of accessing with useAsyncValue</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// const someData = useAsyncValue();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// \`useQuery\` as usual</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useQuery</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;someKey&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="重合部分" tabindex="-1">重合部分 <a class="header-anchor" href="#重合部分" aria-label="Permalink to &quot;重合部分&quot;">​</a></h2><p>像 <code>useQuery</code> 这样的钩子经常返回 pending 和 error 状态，您可以使用它们来拆分您的 UI。使用 React Router，您可以将所有这些分支逻辑放在<a href="https://baimingxuan.github.io/react-router6-doc/route/error-element" target="_blank" rel="noreferrer"><code>errorElement</code></a>、<a href="https://baimingxuan.github.io/react-router6-doc/hooks/use-navigation" target="_blank" rel="noreferrer"><code>useNavigation</code></a>和<a href="https://baimingxuan.github.io/react-router6-doc/components/await" target="_blank" rel="noreferrer"><code>Await</code></a>中，避免在正常路径组件中处理分支逻辑。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>有了所有这些 API 的协同工作，您现在就可以使用来自 React Router 的<a href="https://baimingxuan.github.io/react-router6-doc/hooks/use-navigation" target="_blank" rel="noreferrer"><code>useNavigation</code></a>来构建待处理状态、优化的用户界面等。使用 React Router 为数据加载、突变和导航状态计时，然后使用 React Query 等库实际实现加载、失效、存储和缓存。</p>`,27),e=[o];function t(r,c,E,y,i,u){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
