import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.0e8ae64e.js";const h=JSON.parse('{"title":"为 React Router做出贡献","description":"","frontmatter":{},"headers":[],"relativePath":"guides/contributing.md","filePath":"guides/contributing.md","lastUpdated":1699184691000}'),e={name:"guides/contributing.md"},p=l(`<h1 id="为-react-router做出贡献" tabindex="-1">为 React Router做出贡献 <a class="header-anchor" href="#为-react-router做出贡献" aria-label="Permalink to &quot;为 React Router做出贡献&quot;">​</a></h1><p>感谢您的贡献，您太棒了！</p><p>说到开放源代码，可以做出许多不同类型的贡献，所有这些贡献都很有价值。以下是一些指导原则，希望对您准备贡献有所帮助。</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p>在为代码库做出贡献之前，您需要 fork 代码库。根据您的贡献类型，这一点会有所不同：</p><ul><li>所有新功能、错误修复或<strong>任何涉及 <code>react-router</code> 代码</strong>的内容都应从 <code>dev</code> 分支中分离出来，并合并到 <code>dev</code> 分支中。</li><li>只涉及文档的改动可以从 <code>main</code> 分支出来，合并到 <code>main</code> 分支中。</li></ul><p>以下步骤将帮助您设置好如何向该版本库贡献更改：</p><ol><li><code>Fork</code>这个<code>repo</code>（点击<a href="https://github.com/remix-run/react-router" target="_blank" rel="noreferrer">本页面</a>右上角的<code>Fork</code>按钮）</li><li>克隆您的分支到本地</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># in a terminal, cd to parent directory where you want your clone to be, then</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">your_github_usernam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">/react-router.git</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">react-router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># if you are making *any* code changes, make sure to checkout the dev branch</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># in a terminal, cd to parent directory where you want your clone to be, then</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">your_github_usernam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">/react-router.git</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">react-router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># if you are making *any* code changes, make sure to checkout the dev branch</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span></code></pre></div><ol start="3"><li>安装依赖项并构建。React Router 使用<a href="https://classic.yarnpkg.com/lang/en/docs/install" target="_blank" rel="noreferrer"><code>yarn</code>(版本1)</a>，所以你也应该这样做。如果使用 <code>npm</code> 安装，则会生成不必要的 <code>package-lock.json</code> 文件。</li></ol><h2 id="您认为找到了错误" tabindex="-1">您认为找到了错误？ <a class="header-anchor" href="#您认为找到了错误" aria-label="Permalink to &quot;您认为找到了错误？&quot;">​</a></h2><p>请遵守问题模板，并通过代码示例提供明确的重现路径。最好是带有失败测试的<code>pull</code>请求。其次是 CodeSandbox 或说明错误的版本库链接。</p><h2 id="添加示例" tabindex="-1">添加示例？ <a class="header-anchor" href="#添加示例" aria-label="Permalink to &quot;添加示例？&quot;">​</a></h2><p>示例可直接添加到主分支中。在本地克隆的主分支上创建一个分支。完成后，创建一个拉取请求并概述你的示例。</p><h2 id="提出新的或更改后的-api" tabindex="-1">提出新的或更改后的 API？ <a class="header-anchor" href="#提出新的或更改后的-api" aria-label="Permalink to &quot;提出新的或更改后的 API？&quot;">​</a></h2><p>请提供深思熟虑的评论和一些示例代码，说明您想在应用程序中使用 React Router 做什么。如果您能在得出需要更改和/或添加什么的结论之前，先向我们展示您是如何受限于当前的 API 的，这将有助于对话的进行。</p><p>我们的经验告诉我们，小的应用程序接口通常更好，因此我们可能不太愿意添加新内容，除非当前的应用程序接口存在明显的限制。尽管如此，我们还是非常希望听到一些我们以前没有考虑过的情况，所以请不要害羞！ 😃</p><h2 id="问题没有得到关注" tabindex="-1">问题没有得到关注？ <a class="header-anchor" href="#问题没有得到关注" aria-label="Permalink to &quot;问题没有得到关注？&quot;">​</a></h2><p>如果你需要修复一个错误，但没有人在修复它，你最好的办法就是提供一个修复程序，并提出<a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request" target="_blank" rel="noreferrer">pull 请求</a>。开放源代码属于我们所有人，推动它向前发展是我们所有人的责任。</p><h2 id="发起pull-请求" tabindex="-1">发起Pull 请求？ <a class="header-anchor" href="#发起pull-请求" aria-label="Permalink to &quot;发起Pull 请求？&quot;">​</a></h2><p><code>pull</code>请求只需得到两个或两个以上合作者的批准即可合并；当 PR 作者是合作者时，也算一个合作者。</p><blockquote><p>IMPORTANT</p><p>在 GitHub 创建 PR 时，请确保将基本分支设置为正确的分支。如果您提交的 PR 涉及到任何代码，那么它应该是 <code>dev</code> 分支。在 GitHub 上创建 PR 时，可通过 &quot;比较更改 &quot;标题下的下拉菜单来设置基准分支：<img src="https://raw.githubusercontent.com/remix-run/react-router/main/static/base-branch.png" alt="img"></p></blockquote><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h3><p>所有修复错误或添加功能的提交都需要测试。</p><p>不要合并未经测试的代码！</p><h3 id="文档-示例" tabindex="-1">文档+示例 <a class="header-anchor" href="#文档-示例" aria-label="Permalink to &quot;文档+示例&quot;">​</a></h3><p>所有更改或添加 API 的提交都必须在拉取请求中完成，同时更新所有相关示例和文档。</p><h2 id="开发" tabindex="-1">开发 <a class="header-anchor" href="#开发" aria-label="Permalink to &quot;开发&quot;">​</a></h2><h3 id="packages" tabindex="-1">Packages <a class="header-anchor" href="#packages" aria-label="Permalink to &quot;Packages&quot;">​</a></h3><p>React Router 使用 monorepo 来托管多个软件包的代码。这些软件包位于 <code>packages</code> 目录中。</p><p>我们使用<a href="https://classic.yarnpkg.com/en/docs/workspaces/" target="_blank" rel="noreferrer"> Yarn 工作区</a>来管理依赖项的安装和各种脚本的运行。要安装所有脚本，请确保已安装<a href="https://classic.yarnpkg.com/lang/en/docs/install" target="_blank" rel="noreferrer">Yarn(版本1)</a>，然后从 repo 根目录运行 <code>yarn</code> 或 <code>yarn install</code> 。</p><h3 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h3><p>从根目录调用 <code>yarn build</code> 将运行编译，整个过程只需几秒钟。由于 <code>react-router-dom</code> 和 <code>react-router-native</code> 都使用 <code>react-router</code> 作为依赖关系，因此必须一起构建所有软件包。</p><h3 id="测试-1" tabindex="-1">测试 <a class="header-anchor" href="#测试-1" aria-label="Permalink to &quot;测试&quot;">​</a></h3><p>在运行测试之前，您需要运行构建。构建后，从根目录运行 <code>yarn test</code> 将运行每个软件包的测试。如果要运行特定软件包的测试，请使用 <code>yarn test --projects packages/&lt;package-name&gt;</code> ：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># Test all packages</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Test only react-router-dom</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--projects</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">packages/react-router-dom</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Test all packages</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Test only react-router-dom</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--projects</span><span style="color:#24292E;"> </span><span style="color:#032F62;">packages/react-router-dom</span></span></code></pre></div><h2 id="仓库分支" tabindex="-1">仓库分支 <a class="header-anchor" href="#仓库分支" aria-label="Permalink to &quot;仓库分支&quot;">​</a></h2><p>该 repo 为不同的目的维护不同的分支。它们看起来是这样的：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">most</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">recent</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">current</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docs</span></span>
<span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">under</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">active</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">development</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">between</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">releases</span></span>
<span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v5</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">most</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">recent</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">specific</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">major</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">most</span><span style="color:#24292E;"> </span><span style="color:#032F62;">recent</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release</span><span style="color:#24292E;"> </span><span style="color:#032F62;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">current</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docs</span></span>
<span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code</span><span style="color:#24292E;"> </span><span style="color:#032F62;">under</span><span style="color:#24292E;"> </span><span style="color:#032F62;">active</span><span style="color:#24292E;"> </span><span style="color:#032F62;">development</span><span style="color:#24292E;"> </span><span style="color:#032F62;">between</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">releases</span></span>
<span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v5</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">most</span><span style="color:#24292E;"> </span><span style="color:#032F62;">recent</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">specific</span><span style="color:#24292E;"> </span><span style="color:#032F62;">major</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release</span></span></code></pre></div><p>可能还有其他分支用于各种功能和实验，但所有神奇的事情都发生在这些分支中。</p><h2 id="新版本发布" tabindex="-1">新版本发布 <a class="header-anchor" href="#新版本发布" aria-label="Permalink to &quot;新版本发布&quot;">​</a></h2><p>当需要发布新版本时，我们会根据不同类型的版本，按照分支策略制定相应的流程。</p><h3 id="react-router-next发布" tabindex="-1"><code>react-router@next</code>发布 <a class="header-anchor" href="#react-router-next发布" aria-label="Permalink to &quot;\`react-router@next\`发布&quot;">​</a></h3><p>我们根据 <code>dev</code> 分支的当前状态创建实验版本。您可以使用 <code>@next</code> 标签安装它们：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">react-router-dom@next</span></span>
<span class="line"><span style="color:#6A737D;"># or</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">react-router-dom@next</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">react-router-dom@next</span></span>
<span class="line"><span style="color:#6A737D;"># or</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">react-router-dom@next</span></span></code></pre></div><p>当 PR 合并到 <code>dev</code> 分支时，这些版本将自动发布。</p><h3 id="最新主要版本发布" tabindex="-1">最新主要版本发布 <a class="header-anchor" href="#最新主要版本发布" aria-label="Permalink to &quot;最新主要版本发布&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># Start from the dev branch.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Merge the main branch into dev to ensure that any hotfixes and</span></span>
<span class="line"><span style="color:#6A737D;"># docs updates are available in the release.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">merge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Create a new release branch from dev.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-b</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release/v6.1.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Create a new tag and update version references throughout the</span></span>
<span class="line"><span style="color:#6A737D;"># codebase.</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">version</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">minor</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># | &quot;patch&quot; | &quot;major&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Push the release branch along with the new release tag.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release/v6.1.0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--follow-tags</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Wait for GitHub actions to run all tests. If the tests pass, the</span></span>
<span class="line"><span style="color:#6A737D;"># release is ready to go! Merge the release branch into main and dev.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">merge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release/v6.1.0</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">merge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release/v6.1.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># The release branch can now be deleted.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">branch</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release/v6.1.0</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--delete</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release/v6.1.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Now go to GitHub and create the release from the new tag. Let</span></span>
<span class="line"><span style="color:#6A737D;"># GitHub Actions take care of the rest!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Start from the dev branch.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Merge the main branch into dev to ensure that any hotfixes and</span></span>
<span class="line"><span style="color:#6A737D;"># docs updates are available in the release.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Create a new release branch from dev.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release/v6.1.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Create a new tag and update version references throughout the</span></span>
<span class="line"><span style="color:#6A737D;"># codebase.</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">minor</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># | &quot;patch&quot; | &quot;major&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Push the release branch along with the new release tag.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release/v6.1.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--follow-tags</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Wait for GitHub actions to run all tests. If the tests pass, the</span></span>
<span class="line"><span style="color:#6A737D;"># release is ready to go! Merge the release branch into main and dev.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release/v6.1.0</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release/v6.1.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># The release branch can now be deleted.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">branch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release/v6.1.0</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--delete</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release/v6.1.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Now go to GitHub and create the release from the new tag. Let</span></span>
<span class="line"><span style="color:#6A737D;"># GitHub Actions take care of the rest!</span></span></code></pre></div><h3 id="热修复发布" tabindex="-1">热修复发布 <a class="header-anchor" href="#热修复发布" aria-label="Permalink to &quot;热修复发布&quot;">​</a></h3><p>有时，我们会遇到需要立即修补的关键错误。如果错误影响到最新版本，我们可以直接从 <code>main</code> （或存在错误的相关主要版本分支）创建一个新版本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># From the main branch, make sure to run the build and all tests</span></span>
<span class="line"><span style="color:#6A737D;"># before creating a new release.</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Assuming the tests pass, create the release tag and update</span></span>
<span class="line"><span style="color:#6A737D;"># version references throughout the codebase.</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">version</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">patch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Push changes along with the new release tag.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--follow-tags</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># In GitHub, create the release from the new tag and it will be</span></span>
<span class="line"><span style="color:#6A737D;"># published via GitHub actions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># When the hot-fix is done, merge the changes into dev and clean</span></span>
<span class="line"><span style="color:#6A737D;"># up conflicts as needed.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">merge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># From the main branch, make sure to run the build and all tests</span></span>
<span class="line"><span style="color:#6A737D;"># before creating a new release.</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Assuming the tests pass, create the release tag and update</span></span>
<span class="line"><span style="color:#6A737D;"># version references throughout the codebase.</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">patch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Push changes along with the new release tag.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--follow-tags</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># In GitHub, create the release from the new tag and it will be</span></span>
<span class="line"><span style="color:#6A737D;"># published via GitHub actions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># When the hot-fix is done, merge the changes into dev and clean</span></span>
<span class="line"><span style="color:#6A737D;"># up conflicts as needed.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span></code></pre></div>`,51),o=[p];function t(c,r,y,i,E,F){return a(),n("div",null,o)}const u=s(e,[["render",t]]);export{h as __pageData,u as default};
