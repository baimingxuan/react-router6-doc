import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.6f0990a9.js";const v=JSON.parse('{"title":"useRevalidator","description":"","frontmatter":{},"headers":[],"relativePath":"hooks/use-revalidator.md","filePath":"hooks/use-revalidator.md","lastUpdated":1699631755000}'),o={name:"hooks/use-revalidator.md"},e=l(`<h1 id="userevalidator" tabindex="-1"><code>useRevalidator</code> <a class="header-anchor" href="#userevalidator" aria-label="Permalink to &quot;\`useRevalidator\`&quot;">​</a></h1><p>此钩子允许您以任何理由重新验证数据。React Router 会在调用操作后自动重新验证数据，但您也可能出于其他原因（如焦点返回窗口时）需要重新验证数据。</p><blockquote><p>IMPORTANT</p><p>此功能只有在使用数据路由器时才有效，请参阅<a href="https://baimingxuan.github.io/react-router6-doc/routers/picking-a-router" target="_blank" rel="noreferrer">&quot;选择路由&quot;</a>。</p></blockquote><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useRevalidator } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-router-dom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WindowFocusRevalidator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> revalidator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRevalidator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useFakeWindowFocus</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    revalidator.</span><span style="color:#B392F0;">revalidate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hidden</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{revalidator.state </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;idle&quot;</span><span style="color:#E1E4E8;">}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Revalidating...</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useRevalidator } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-router-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WindowFocusRevalidator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> revalidator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRevalidator</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">useFakeWindowFocus</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    revalidator.</span><span style="color:#6F42C1;">revalidate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hidden</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{revalidator.state </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;idle&quot;</span><span style="color:#24292E;">}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      Revalidating...</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同样，React Router 已经在绝大多数情况下自动重新验证了页面上的数据，因此很少需要这样做。如果您发现自己使用此功能对数据进行正常的 CRUD 操作，以响应用户交互，那么您可能没有利用其他 API（如 <a href="https://baimingxuan.github.io/react-router6-doc/components/form" target="_blank" rel="noreferrer"><code>&lt;Form&gt;</code></a> 、 <a href="https://baimingxuan.github.io/react-router6-doc/hooks/use-submit" target="_blank" rel="noreferrer"><code>useSubmit</code></a> 或 <a href="https://baimingxuan.github.io/react-router6-doc/hooks/use-fetcher" target="_blank" rel="noreferrer"><code>useFetcher</code></a> ）来自动执行此操作。</p><h2 id="revalidator-state" tabindex="-1"><code>revalidator.state</code> <a class="header-anchor" href="#revalidator-state" aria-label="Permalink to &quot;\`revalidator.state\`&quot;">​</a></h2><p>告诉您重新验证所处的状态，是 <code>&quot;idle&quot;</code> 还是 <code>&quot;loading&quot;</code> 。</p><p>这对创建加载指示器和旋转器非常有用，可以让用户知道应用程序正在思考。</p><h2 id="revalidator-revalidate" tabindex="-1"><code>revalidator.revalidate()</code> <a class="header-anchor" href="#revalidator-revalidate" aria-label="Permalink to &quot;\`revalidator.revalidate()\`&quot;">​</a></h2><p>这将启动重新验证。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useLivePageData</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> revalidator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRevalidator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> interval </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (revalidator.state </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;idle&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      revalidator.</span><span style="color:#B392F0;">revalidate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, [interval]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useLivePageData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> revalidator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRevalidator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> interval </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useInterval</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (revalidator.state </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;idle&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      revalidator.</span><span style="color:#6F42C1;">revalidate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }, [interval]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h2><p>虽然您可以同时呈现多个 <code>useRevalidator</code> ，但它的底层是一个单例。这意味着当调用一个 <code>revalidator.revalidate()</code> 时，所有实例都会一起进入 <code>&quot;loading&quot;</code> 状态（或者说，它们都会更新以报告单例状态）。</p><p>当重新验证正在进行时，调用 <code>revalidate()</code> 会自动处理竞争条件。</p><p>如果在重新验证过程中发生导航，重新验证将被取消，并要求所有加载器为下一页提供新数据。</p>`,15),p=[e];function t(r,c,E,i,y,d){return a(),n("div",null,p)}const h=s(o,[["render",t]]);export{v as __pageData,h as default};
